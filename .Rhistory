solve <- solve(data)
x$setSolve(solve)
solve
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
cached <<- NULL
set <- function(y){
x <<- y
cached <<- NULL
}
get <- function(){
x
}
setSolve <- function(solve){
cached <<- solve
}
getSolve <- function(){
cached
}
list(set=set, get=get, setSolve=setSolve, getSolve=getSolve)
}
cacheSolve <- function(x, ...) {
message(is.matrix(x))
cached <- x$getSolve()
if (!is.null(cached)){
message("Data from cache")
return(cached)
}
data <- x$get()
solve <- solve(data)
x$setSolve(solve)
solve
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
cached <<- NULL
set <- function(y){
x <<- y
cached <<- NULL
}
get <- function(){
x
}
setSolve <- function(solve){
cached <<- solve
}
getSolve <- function(){
cached
}
list(set=set, get=get, setSolve=setSolve, getSolve=getSolve)
}
cacheSolve <- function(x, ...) {
cached <- x$getSolve()
if (!is.null(cached)){
message("Data from cache")
return(cached)
}
data <- x$get()
solve <- solve(data)
x$setSolve(solve)
solve
}
makeCacheMatrix(matrix(1:4, 2, 2))
m <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1
tf
num_vect >- 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Vadim")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
c(3,5,7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf= NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["var"]
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
5 != 7
5 == 7
!(5 != 7)
info()
!TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(flags, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=True, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flops2 <- rbinom(1, size=100, prob=0.7)
flops2 <- rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXct(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
install.packages("dplyr")
library(swirl)
install.packages("swirl")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=False)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
librarydplyr
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, id_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:10))
select(cran, -(1:11))
select(cran, -(X:11))
select(cran, -(0:11))
select(cran, -(X:9))
select(cran, -(X:10))
select(cran, -(X:11))
select(cran, -(X:size(cran)))
select(cran, -(X:ncol(cran)))
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
Try arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran = tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
students3
submit()
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
mutate(passed, status = passed)
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
0
exit
q()
read.csv.sql()
install.packages("read.csv.sql")
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
setwd("~/workspace/coursera_exdata_011/ExData_Plotting1")
df <- read.csv.sql("household_power_consumption.txt", sql="select * from file where Date<='1/2/2007' and Date>='2/2/2007'")
df <- read.csv.sql("household_power_consumption.txt", sql="select * from file where Date<='1/2/2007' and Date>='2/2/2007'", sep=";")
dim(df)
df
head(df)
df <- read.csv.sql("household_power_consumption.txt", sql="select * from file where Date=='1/2/2007' or Date=='2/2/2007'", sep=";")
head(df)
dim(df)
df <- read.csv.sql("household_power_consumption.txt", sql="select * from file where Date in ('1/2/2007', '2/2/2007')", sep=";")
dim(df)
hist(df$Global_active_power)
?hist
hist(df$Global_active_power, col="red", border="black", main="Global Active Power")
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)")
?hist
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", breaks=12)
?hist
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0,12))
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0,12), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0,1200), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 12), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 120), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200))
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200))
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1400), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200), breaks=12)
?hist
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200), breaks=12)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200))
png("plot1.png", width = 480, height = 480)
hist(df$Global_active_power, col="red", border="black", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0, 1200))
dev.off()
load(file = "plot1.R")
load(file = "plot1.R")
create_plot1 <- function(){
# install library 'sqldf', if necessary
install.packages("sqldf")
# load library
library(sqldf)
# select data from file to data frame with filtering
df <- read.csv.sql("household_power_consumption.txt", sql="select * from file where Date in ('1/2/2007', '2/2/2007')", sep=";")
# create png file
png("plot1.png", width = 480, height = 480)
hist(
df$Global_active_power,
col="red",
border="black",
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
ylim=c(0, 1200)
)
dev.off()
}
create_plot1()
